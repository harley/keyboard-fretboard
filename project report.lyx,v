head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2009.05.11.16.01.28;	author dtt22;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.11.12.35.22;	author dtt22;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.11.12.17.03;	author dtt22;	state Exp;
branches;
next	;


desc
@intro
@


1.3
log
@midi
@
text
@#LyX 1.5.4 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize 12
\spacing single
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1.5in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
CS290 Final Report
\newline
Virtual Piano Keyboard and Guitar Fretboard Widgets for
 Haskore
\end_layout

\begin_layout Author
Harley Trung
\newline
Advisor: Paul Hudak
\end_layout

\begin_layout Date
Spring 2009
\end_layout

\begin_layout Abstract
Functional Reactive Programming (FRP) is a programming paradigm for reactive
 programming using the building blocks of functional programming to model
 hybrid systems containing both continuous time-varying behaviors and discrete
 events.
 FRP has been applied to a variety of systems, including computer animation
 [EH97], robotics [HCNP02], and real-time systems [WTH01].
 
\end_layout

\begin_layout Abstract
In computer music, we want to expose to the programmer the notion of discrete
 notes, events, and continuous audio signals, as well as the transition
 and interaction between these entities.
 The hybrid and dynamic nature of the problem makes FRP a good choice for
 modeling computer music systems.[E09]
\end_layout

\begin_layout Abstract
Haskore [HMGW96], a domain-specific language (DSL) built on top of Haskell,
 takes an algebraic approach to high-level music description and composition.
 Haskore has built-in functions to represent notes, rhythms, chords and
 many more.
 In Haskore a basic set of widgets is provided that are collectively referred
 to as the Graphical Music Interface (GMI).
 [H08]
\end_layout

\begin_layout Abstract
However, Haskore GMI currently provides only a limited set of UI widgets
 that can only create buttons, value sliders, checkboxes, radio buttons,
 text displays, and allow MIDI input and output.
 This project sets out to add to Haskore two high-level, sophisticated widgets:
 a piano keyboard and a guitar fretboard.
 There are four goals in mind.
 First, the design and implementation should be as generic as possible,
 maximizing common features to be shared by a piano keyboard and a guitar
 fretboard.
 Second, the design should reflect real life instruments.
 For example, the virtual piano keyboard should behave almost identical
 to a MIDI keyboard that can be plugged into a computer for MIDI input;
 a pedal can be attached to it and there are nobs to change various settings
 such as echo, transpose, etc.
 Third, the interface must not only be simple enough to customize and use,
 but also support a rich set of features such as echo, transpose, pedal,
 import-song, change-instrument and MIDI output.
 Finally, I discuss the challenges encountered during the development and
 potential contributions of these widgets to a Haskore user.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The initial project proposal was to extend the functional UI library in
 Haskore by integrating the GMI with a popular GUI framework so as to allow
 direct porting of UI widgets to GMI.
 However, there is no current GUI framework that is stable enough to use.
 For example, Phooey, a popular functional UI library for Haskell, uses
 wxHaskell to provide an FRP-like abstraction for GUI programming.
 However, wxHaskell itself is built on top of wxWidgets - a C++ library.
 I encountered my problems testing out Phooey and many of the known bugs
 are not yet solved.
 Other Haskell GUI frameworks such as grapefruit, wxFruit, gtk2hs are also
 new and unstable.
 Moreover, these external GUI packages are very different from Haskore.
 Therefore, the goal of integrating Haskore's Functional UI with one of
 these framworks while maintaining the signal level abstraction is too ambitious.
 The project was therefore limited to desiging instrument widgets for Haskore.
\end_layout

\begin_layout Standard
The project is still interesting and challenging nevertheless.
 Haskell is different from conventional imperative and object-oriented languages
 such as C, C++, Java, C# and so on.
 It requires a different mind-set to program in Haskell, with the goals
 towards the purity, elegance in the programs.
 
\end_layout

\begin_layout Section
A brief introduction of Haskore's GMI
\end_layout

\begin_layout Subsection
The UI Monad
\end_layout

\begin_layout Standard
GMI widgets are created at the UI level.
 Similar to IO, UI is an abstract type and is a monad, which allows us to
 use the 
\series bold
do
\series default
 syntax
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
label :: String -> UI () 
\end_layout

\begin_layout Standard
display :: Signal String -> UI () 
\end_layout

\begin_layout Standard
button :: String -> UI (Signal Bool ) 
\end_layout

\begin_layout Standard
checkbox :: String -> Bool -> UI (Signal Bool ) 
\end_layout

\begin_layout Standard
radio :: [String ] -> Int -> UI (Signal Int ) 
\end_layout

\begin_layout Standard
hSlider , vSlider :: (RealFrac a) -> (a, a) -> a -> UI (Signal a) 
\end_layout

\begin_layout Standard
hiSlider , viSlider :: (Integral a) -> a -> (a, a) -> a -> UI (Signal a)
 
\end_layout

\begin_layout Standard
canvas :: Dimension -> EventS Graphic -> UI ()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Midi Input and Output
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
midiIn :: Signal DeviceID → UI (EventS [MidiMessage ]) 
\end_layout

\begin_layout Standard
midiOut :: Signal DeviceID → EventS [MidiMessage ] → UI () 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
midiOut takes a stream of MidiMessage events and sends to Midi output device,
 and midiIin generates a stream of MidiMessage events corresponding to the
 message sent by the Midi input device.
\end_layout

\begin_layout Standard
A virtual keyboard or fretboard is an virtual input device, therefore we'd
 like it to returns the same type as midiIn.
 It may take more arguments depending on the specifics of the instruments.
 In our case:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
piano :: PianoKeyMap → Midi.Channel → EMM → UI EMM
\end_layout

\begin_layout Standard
guitar :: GuitarKeyMap → Midi.Channel → EMM → UI EMM
\end_layout

\end_inset


\end_layout

\begin_layout Standard
From now on we are using the following synonym:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
type EMM = EventS [MidiMessage]
\end_layout

\end_inset


\end_layout

\end_body
\end_document
@


1.2
log
@2
@
text
@d145 161
a305 1
Virtual Piano
@


1.1
log
@Initial revision
@
text
@d135 9
d145 1
a145 1
Core
@
